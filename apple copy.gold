package social

import (
	"crypto/ecdsa"
	"crypto/x509"
	"encoding/pem"
	"fmt"
	"log"
	"net/url"
	"time"

	"github.com/dgrijalva/jwt-go"
	"github.com/valyala/fasthttp"
)

// https://developer.apple.com/documentation/sign_in_with_apple/generate_and_validate_tokens
type AppleSettigns struct {
	TeamID     string //= "U4U6P5K5V6"
	ClientID   string //= if token from app > App ID, if token from web > Services ID "spiritchief.futurecalendar"
	Callback   string //= "https://api.futery.com/oauth/apple" //Callback URL
	KeyID      string //= "PNQJHK8XJ7"                         //Key ID
	PrivateKey []byte //= `-----BEGIN PRIVATE KEY-----MIGTAgEAMB

	//ClientSecret string //client_secret
}

/* JWT token signatured by developer private key */
func (a *AppleSettigns) Secret() (jwttoken string) {

	// Here you need to decode the Apple private key, which is in pem format
	block, _ := pem.Decode(a.PrivateKey)
	// Check if it's a private key
	if block == nil || block.Type != "PRIVATE KEY" {
		log.Println("Failed to decode PEM block containing private key")
		return
	}
	// Get the encoded bytes
	x509Encoded := block.Bytes

	token := jwt.NewWithClaims(
		jwt.SigningMethodES256, // specific instance of `*SigningMethodECDSA`
		jwt.StandardClaims{
			Issuer:    a.KeyID,
			IssuedAt:  time.Now().Unix(),
			ExpiresAt: time.Now().Unix() + 15777000, //6 month
			Audience:  "https://appleid.apple.com",
			Subject:   a.ClientID,
		},
	)
	token.Header["kid"] = a.KeyID

	// Now you need an instance of *ecdsa.PrivateKey
	parsedKey, err := x509.ParsePKCS8PrivateKey(x509Encoded) // EDIT to x509Encoded from p8bytes
	if err != nil {
		panic(err)
	}

	ecdsaPrivateKey, ok := parsedKey.(*ecdsa.PrivateKey)
	if !ok {
		panic("not ecdsa private key")
	}

	// Finally sign the token with the value of type *ecdsa.PrivateKey
	signed, err := token.SignedString(ecdsaPrivateKey)
	if err != nil {
		panic(err)
	}

	return signed
}

/* {
    "alg": "ES256",
    "kid": "ABC123DEFG"
}
{
    "iss": "DEF123GHIJ",
    "iat": 1437179036,
    "exp": 1493298100,
    "aud": "https://appleid.apple.com",
    "sub": "com.mytest.app"
} */

//POST https://appleid.apple.com/auth/token
const applelink = "https://appleid.apple.com/auth/token"

func Apple(token string, settings *AppleSettigns) (u user, err error) {
	req := fasthttp.AcquireRequest()
	req.SetRequestURI(applelink)
	req.Header.SetMethod(fasthttp.MethodPost)
	req.Header.SetContentType("application/x-www-form-urlencoded")

	data := url.Values{}
	data.Set("client_id", settings.ClientID)
	data.Set("client_secret", settings.Secret())
	data.Set("code", token)
	data.Set("grant_type", "authorization_code")
	data.Set("redirect_uri", settings.Callback)
	req.SetBodyString(data.Encode())

	fmt.Println(req.String())

	resp := fasthttp.AcquireResponse()
	fasthttp.Do(req, resp)
	fmt.Println(resp.String())
	return
}

/* curl -v POST "https://appleid.apple.com/auth/token" \
-H 'content-type: application/x-www-form-urlencoded' \
-d 'client_id=CLIENT_ID' \
-d 'client_secret=CLIENT_SECRET' \
-d 'code=CODE' \
-d 'grant_type=authorization_code' \
-d 'redirect_uri=REDIRECT_URI' */
